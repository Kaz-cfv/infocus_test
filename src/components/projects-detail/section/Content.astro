---
import MovieUrl from "../parts/MovieUrl.astro";
import SingleImage from "../parts/SingleImage.astro";
import TextContent from "../parts/TextContent.astro";
import TwoColumnImages from "../parts/TwoColumnImages.astro";
import ThreePanelImages from "../parts/ThreePanelImages.astro";

export interface Props {
  contents?: Array<any>;
  project?: any;
}

const { contents = [], project } = Astro.props;

function getImageData(imageData: any): any {
  if (typeof imageData === 'object' && imageData !== null && imageData.url) {
    return imageData;
  }

  return null;
}
---

<div class="c-article">
  {contents.map((item) => {
    switch (item.acf_fc_layout) {
      case 'movie_url':
        return <MovieUrl url={item.url} />;

      case 'image':
        const imageData = getImageData(item.image);
        return imageData ? (
          <SingleImage
            image={imageData}
            caption={item.caption || ''}
            maxWidth={item['max-width'] || ''}
          />
        ) : null;

      case 'text':
        return <TextContent text={item.text} />;

      case 'image_2columns':
        const resolvedImages = item.images?.map((img: any) => {
          const resolvedImg = getImageData(img.image);
          return resolvedImg ? {
            image: resolvedImg,
            caption: img.caption || '',
            maxWidth: img['max-width'] || ''
          } : null;
        }).filter((img: any) => img !== null) || [];

        return resolvedImages.length > 0 ? (
          <TwoColumnImages
            images={resolvedImages}
            mobileColumns={item.mobile_columns}
          />
        ) : null;

      case 'image_3panel':
        const largePanelImage = getImageData(item.large?.image);
        const smallPanelImages = item.small?.map((small: any) => {
          const resolvedImg = getImageData(small.image);
          return resolvedImg ? {
            image: resolvedImg,
            caption: small.caption || ''
          } : null;
        }).filter((img: any) => img !== null) || [];

        return largePanelImage && smallPanelImages.length > 0 ? (
          <ThreePanelImages
            position={item.position}
            large={{
              image: largePanelImage,
              caption: item.large?.caption || ''
            }}
            small={smallPanelImages}
          />
        ) : null;

      default:
        // 未知のレイアウトタイプの場合は警告を出す
        console.warn(`Unknown layout type: ${item.acf_fc_layout}`);
        return null;
    }
  })}
</div>

<style lang="scss">
@use '../../../assets/scss/mediaquery' as me;
@use '../../../assets/scss/mixin' as mi;

.c-article {
  margin-block-start: 70px;
  font-family: var(--f-jp);
  @include me.pc {
    padding-inline: 30px;
  }
  @include me.sp {
    margin-block-start: 60px;
  }
}
</style>
