---
interface Tag {
  name: string;
  url: string;
}

interface Props {
  id: number;
  title: string;
  tags: Tag[];
  imageSrc: string;
  videoSrc?: string;
  imageAlt?: string;
  url?: string;
  type?: string;
}

const {
  id = '',
  title,
  tags,
  imageSrc,
  videoSrc,
  imageAlt = "Projects Image",
  url,
  type = "",
} = Astro.props;

// urlがオブジェクトの場合はその中身を確認し、文字列として取得
let safeUrl = '#';
let linkTarget = null;

if (typeof url === 'string' && url) {
  safeUrl = url;
} else if (url && typeof url === 'object') {
  // オブジェクトの場合、href/url とtarget情報を取得
  if ('href' in url) {
    safeUrl = url.href;
  } else if ('url' in url) {
    safeUrl = url.url;
  }

  // target情報があれば取得
  if ('target' in url) {
    linkTarget = url.target;
  }
}

// 外部リンクかどうかを判定（http/httpsで始まり、かつ現在のサイトのドメインでない場合）
const isExternalLink = (safeUrl.startsWith('http://') || safeUrl.startsWith('https://')) &&
                      !safeUrl.startsWith(Astro.site?.href || '');

// linkTargetが'_blank'の場合も外部リンクとして扱う
const shouldOpenInNewTab = isExternalLink || linkTarget === '_blank';

const linkProps = shouldOpenInNewTab
  ? { href: safeUrl, target: '_blank', rel: 'noopener noreferrer' }
  : { href: safeUrl };

// デバッグ用ログ（問題解決後に削除予定）
// console.log('🔍 ProjectCard URL Debug:', {
//   originalUrl: url,
//   urlType: typeof url,
//   safeUrl: safeUrl,
//   isExternalLink: isExternalLink
// });
---

<div class="c-project-card" data-id={id} data-type={type}>
  <a {...linkProps} class="c-project-card__image-wrapper">
    {imageSrc && (
      <img src={imageSrc} alt={imageAlt} class="c-project-card__image" />
    )}
    {videoSrc && (
      <video
        src={videoSrc}
        class="c-project-card__video"
        muted
        loop
        playsinline
        preload="metadata"
      ></video>
    )}
  </a>
  <div class="c-project-card__content">
    <h3 class="c-project-card__title">{title}</h3>
    <div class="c-project-card__tags js-hover">
      {tags.map((tag, index) => (
        <>
          <a href={tag.url} class="c-project-card__category js-hover-item">{tag.name}</a>
          {index < tags.length - 1 && <span class="c-project-card__separator">,</span>}
        </>
      ))}
    </div>
  </div>
</div>

<style lang="scss">
@use '../../../assets/scss/_mediaquery' as me;
@use '../../../assets/scss/_mixin' as mi;

.c-project-card {
  display: flex;
  flex-direction: column;
  position: relative;
  transition: opacity 0.3s ease-out;
  height: 100%;

  &[data-type="cover"] {
    height: 100%;
  }

  &:not([data-type="cover"]) {
    @include me.pc {
      padding-bottom: 78px;
    }
    @include me.sp {
      padding-bottom: 7.701vw;
    }
    &[data-type="pickup"] {
      @include me.pc {
        padding-bottom: 50px;
      }
      @include me.sp {
        padding-bottom: 25px;
      }
    }
  }

  &__image-wrapper {
    display: block;
    position: relative;
    overflow: hidden;
    aspect-ratio: 16 / 9;
    @at-root [data-type="pickup"] & {
      @include me.pc {
        margin-top: 30px;
        margin-inline: 30px;
      }
    }
    @at-root [data-type="cover"] & {
      aspect-ratio: 1 / 1;
      @include me.pc {
        flex: 1;
      }
      @include me.sp {
        height: 100%;
        min-height: 100%;
        width: 100%;
      }
    }
  }

  &__image {
    @include mi.absolute-all;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.5s ease-out;
    @include me.sp {
      aspect-ratio: 16 / 9;
    }
  }

  &__video {
    @include mi.absolute-all;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.5s ease-out;
    z-index: 2;
    @at-root .c-project-card.is-play & {
      opacity: 1;
      visibility: visible;
    }
  }

  &__content {
    display: flex;
    flex-direction: column;
    row-gap: 8px;
    margin-top: 16px;
    padding-inline: 30px;
    @include me.sp {
      row-gap: 0;
      margin-top: 8px;
      padding-inline: 16px;
    }
    @at-root [data-type="cover"] & {
      display: none;
    }
  }

  &__title {
    color: var(--c-white);
    font-size: 1.6rem;
    font-weight: 700;
    line-height: 2.32rem;
    @include me.sp {
      font-size: 1.4rem;
    }
    @at-root [data-type="pickup"] & {
      font-size: 2rem;
      @include me.sp {
        font-size: 1.8rem;
      }
    }
  }

  &__tags {
    font-size: 1.2rem;
    font-weight: 600;
    line-height: 2.32rem;
    @at-root [data-type="pickup"] & {
      font-size: 1.4rem;
      @include me.sp {
        font-size: 1.2rem;
      }
    }
  }

  &__category {
    display: inline-block;
    color: var(--c-gray);
  }

  &__separator {
    color: var(--c-gray);
    margin-inline-end: 4px;
  }
}
</style>
