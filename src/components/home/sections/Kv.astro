---
// Props型定義 - 空のPropsでクライアントサイドで動的に設定
export interface Props {}
---

<div class="p-home-kv" data-video id="kvContainer">
  <div class="p-home-kv__item">
    <video
      id="kvVideo"
      autoplay
      muted
      playsinline
      class="p-home-kv__video"
    >
    </video>
  </div>
</div>

<!-- クライアントサイドでAPIデータを受け取る -->
<script>
  // カスタムイベントでAPIデータを受け取る
  document.addEventListener('homeDataLoaded', (event) => {
    const homeData = (event as CustomEvent).detail;

    // ヒーロー動画のデータを処理
    let herosData = null;
    if (homeData?.heros) {
      herosData = homeData.heros;
    } else if (homeData?.home?.heros) {
      herosData = homeData.home.heros;
    }

    const videoElement = document.getElementById('kvVideo');
    if (!videoElement) {
      console.warn('⚠️ 動画要素が見つかりませんでした');
      return;
    }
    const video = videoElement as HTMLVideoElement;

    if (herosData && Array.isArray(herosData) && herosData.length > 0) {
      // 全動画のURLを配列に格納
      const videoUrls = herosData.map(hero => hero.movie).filter(url => url);
      let currentIndex = 0; // ここを0に固定

      // ロード時にランダムな開始位置を設定
      // **この部分を削除**
      // const randomIndex = Math.floor(Math.random() * videoUrls.length);
      // currentIndex = randomIndex;

      // 動画再生の関数
      const playNextVideo = () => {
        if (videoUrls.length === 0) return;
        const currentUrl = videoUrls[currentIndex];
        // console.log(`🎥 再生動画: ${currentUrl}`);
        video.src = currentUrl;
        video.load();
        video.play();

        video.removeEventListener('ended', onVideoEnd);
        video.addEventListener('ended', onVideoEnd);
      };
      // 動画終了時の処理
      const onVideoEnd = () => {
        currentIndex = (currentIndex + 1) % videoUrls.length;
        playNextVideo();
      };

      // エラーハンドリング
      video.addEventListener('error', (e) => {
        console.error('❌ 動画の読み込みエラー:', e);
        // エラー発生時も次の動画へ
        onVideoEnd();
      });
      // 最初の動画を再生
      playNextVideo();
    } else {
      console.warn('⚠️ 動画データが取得できませんでした');
    }
  });
</script>

<style lang="scss">
@use '../../../assets/scss/mediaquery' as me;
@use '../../../assets/scss/mixin' as mi;

.p-home-kv {
  overflow: hidden;

  &__item {
    position: relative;
    @include me.pc {
      aspect-ratio: 1440 / 563;
      width: 100%;
    }
    @include me.sp {
      aspect-ratio: 4 / 5;
      width: 100%;
    }
  }

  &__video {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
}

</style>
