---

// サーバーサイドでHomeデータを取得
let categories = [];
let totalProjects = 0;
let debugInfo = { status: 'loading', error: null, categoriesCount: 0 };

try {
  // 静的JSONファイルを直接読み込み
  const response = await fetch('https://infocus.wp.site-prev2.com/api/home.json');

  if (!response.ok) {
    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
  }

  const rawData = await response.json();
  console.log('📡 Raw data received:', !!rawData);

  // データの安全な取得（HomeModelの処理をインライン化）
  if (rawData?.home?.projects?.catergory && Array.isArray(rawData.home.projects.catergory)) {
    // カテゴリデータを処理
    categories = rawData.home.projects.catergory
      .map(category => ({
        termId: category.term_id || 0,
        name: category.name || '',
        slug: category.slug || '',
        count: category.count || 0,
        termOrder: category.term_order || '0'
      }))
      .sort((a, b) => {
        const orderA = parseInt(a.termOrder) || 0;
        const orderB = parseInt(b.termOrder) || 0;
        return orderA - orderB;
      });

    // 全プロジェクト数を計算
    totalProjects = categories.reduce((total, cat) => total + cat.count, 0);

    debugInfo = {
      status: 'success',
      error: null,
      categoriesCount: categories.length,
      totalProjects: totalProjects
    };

    console.log('✅ Categories processed:', categories.length);
    console.log('📊 Total projects:', totalProjects);
  } else {
    throw new Error('No categories data found in response');
  }

} catch (error) {
  console.error('❌ Failed to fetch home data:', error);
}

// 最終確認
console.log('🎯 Final render data:', {
  categoriesCount: categories.length,
  totalProjects: totalProjects,
  categories: categories.map(cat => ({ name: cat.name, count: cat.count }))
});
---

<div class="p-home-intro">
  <div class="p-home-intro-head">
    <h1 class="p-home-intro-head__caption">We are<br>a digital branding studio</h1>
    <a href="/about/" class="p-home-intro-head__link">
      Learn more
      <span class="p-home-intro-head__icon"><svg width="11" height="11" viewBox="0 0 11 11" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M0.54 5.044H7.596C6.684 4.204 5.124 2.68 4.152 1.732L5.052 0.831999L10.032 5.716V5.74L5.052 10.648L4.152 9.7C5.124 8.764 6.684 7.228 7.596 6.388H0.54V5.044Z" fill="white"/></svg></span>
    </a>
  </div>
  <ul class="p-home-intro-category">
    <!-- 全カテゴリ表示用のALLアイテム -->
    <li class="p-home-intro-category__item" data-catgory="ALL">
      <a href="/projects/" class="p-home-intro-category__link">
        <span class="p-home-intro-category__name">ALL</span>
        <span class="p-home-intro-category__num">{totalProjects}</span>
      </a>
    </li>
    <!-- 動的カテゴリ表示 -->
    {categories.map((category) => (
      <li class="p-home-intro-category__item" data-catgory={category.name}>
        <a href={`/projects/?category=${category.slug}`} class="p-home-intro-category__link">
          <span class="p-home-intro-category__name">{category.name}</span>
          <span class="p-home-intro-category__num">{category.count}</span>
        </a>
      </li>
    ))}
  </ul>
</div>

<!-- 詳細デバッグ情報（開発時のみ） -->
<!-- {import.meta.env.MODE === 'development' && (
  <script define:vars={{ categories, totalProjects, debugInfo }}>
    console.group('🏷️ Category Render Debug');
    console.log('Debug Info:', debugInfo);
    console.log('Categories for render:', categories);
    console.log('Total projects for render:', totalProjects);
    console.log('DOM should show:', categories.length, 'category items + 1 ALL item');
    console.groupEnd();

    // DOMチェック機能
    setTimeout(() => {
      const categoryItems = document.querySelectorAll('.p-home-intro-category__item');
      const categoryNums = document.querySelectorAll('.p-home-intro-category__num');

      console.group('🔍 DOM Verification');
      console.log('Category items in DOM:', categoryItems.length);
      console.log('Category numbers in DOM:', categoryNums.length);

      categoryNums.forEach((numEl, index) => {
        console.log(`Item ${index}: "${numEl.textContent}"`);
      });
      console.groupEnd();
    }, 100);
  </script>
)} -->

<style lang="scss">
@use '../../../assets/scss/mediaquery' as me;
@use '../../../assets/scss/mixin' as mi;

.p-home-intro {
  border-top: solid 2px var(--c-white);
  border-bottom: solid 2px var(--c-white);
  @include me.pc {
    display: grid;
    grid-template-columns: 956px 1fr;
    align-items: center;
    @media screen and (max-width: 1140px) {
      display: grid;
      grid-template-columns: 1fr 184px;
    }
  }

  &-head {
    position: relative;
    @include me.pc {
      padding-inline: 30px;
    }
    @include me.sp {
      row-gap: 14px;
      padding-inline: 20px;
      padding-block: 56px;
      &::after {
        content: "";
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 2px;
        background-color: var(--c-white);
      }
    }

    &__caption {
      font-size: 5.2rem;
      letter-spacing: -.02rem;
      @include me.sp {
        font-size: 3.6rem;
        letter-spacing: -.05rem;
      }

      br {
        @include me.pc {
          display: none;
        }
      }
    }

    &__link {
      display: inline-flex;
      align-items: center;
      column-gap: 12px;
      color: var(--c-white);
      margin-top: 11px;
      font-size: 1.4rem;
      font-weight: 600;
      @include me.sp {
        margin-top: 14px;
      }
    }

    &__icon {
      display: flex;
      justify-content: center;
      align-items: center;
      @include me.sp {
        transform: rotate(90deg) translateX(1px);
      }
    }
  }

  &-category {
    @include me.pc {
      border-left: solid 1px #828282;
    }

    &__item {
      position: relative;
      &::after {
        content: "";
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 1px;
        background-color: var(--c-gray02);
      }
      &:last-child {
        background-color: transparent;
      }
    }

    a {
      color: var(--c-white);
    }

    &__link {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding-inline: 8px 13px;
      padding-block: 13px;
      font-weight: 700;
      @include me.sp {
        padding-inline: 16px;
        padding-block: 11px 9px;
      }
    }

    &__name {
      font-size: 1.6rem;
      @include me.sp {
        font-size: 1.8rem;
      }
    }

    &__num {
      color: #B5B5B5;
      font-size: 1rem;
      @include me.sp {
        font-size: 1.2rem;
      }
    }
  }
}
</style>
