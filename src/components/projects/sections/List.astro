---
import ProjectCard from "../../ProjectCard.astro";
import Info from "../parts/Info.astro";

// CMS„ÅÆProjects„Éá„Éº„Çø„ÇíÂèñÂæó
let projects = [];

try {
  const response = await fetch('https://infocus.wp.site-prev2.com/api/projects.json');

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  // „É¨„Çπ„Éù„É≥„Çπ„ÉÜ„Ç≠„Çπ„Éà„ÇíÂèñÂæó„Åó„Å¶JSON„Çí„Éë„Éº„Çπ
  const responseText = await response.text();

  let projectsData;
  try {
    projectsData = JSON.parse(responseText);
  } catch (parseError) {
    console.error('‚ùå JSON Parse Error:', parseError);
    console.log('üîç First 200 chars of response:', responseText.substring(0, 200));
    throw parseError;
  }

  const projectsArray = Array.isArray(projectsData) ? projectsData : [projectsData];

  // console.log('üìä Projects items count:', projectsArray.length);

  // Êó¢Â≠ò„ÅÆProjectCard„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ„Å´Âêà„Çè„Åõ„Å¶„Éá„Éº„Çø„ÇíÂ§âÊèõ
  projects = projectsArray
    .filter(item => {
      const hasTitle = !!item.title;
      const hasSlug = !!item.slug;

      return hasTitle && hasSlug;
    })
    .map((item, index) => {
      // tags„ÅÆÊßãÈÄ†„ÇíÁ¢∫Ë™ç„Åó„Å¶ÈÅ©Âàá„Å´ÊäΩÂá∫
      let tags = [];
      if (item.acfs?.tags && Array.isArray(item.acfs.tags)) {
        tags = item.acfs.tags.filter(tag => tag.terms && tag.terms.name).map(tag => ({
          name: tag.terms.name,
          url: `/projects/?category=${tag.terms.term_id || ''}`
        }));
      }

      // „Çµ„É†„Éç„Ç§„É´ÁîªÂÉè„ÅÆ„Åø„Çí‰ΩøÁî®
      const imageSrc = item.acfs?.thumbnail?.image?.url;

      return {
        id: item.id || index + 1,
        title: item.title.trim(),
        tags: tags,
        imageSrc: imageSrc,
        url: `/projects/${item.slug}/`,
        type: "default" // Êó¢Â≠ò„ÅÆtypeÂ±ûÊÄß„ÇíÁ∂≠ÊåÅ
      };
    })
    .sort((a, b) => b.id - a.id); // ID„ÅÆÈôçÈ†Ü„Åß„ÇΩ„Éº„ÉàÔºàÊñ∞„Åó„ÅÑÈ†ÜÔºâ

  // console.log('‚úÖ Projects data loaded successfully:', {
  //   total: projects.length,
  //   projectsWithImages: projects.filter(item => item.imageSrc).length,
  //   projectsWithTags: projects.filter(item => item.tags.length > 0).length
  // });

} catch (error) {
  console.error('‚ùå Failed to fetch projects data:', error);
  console.error('‚ùå Error details:', {
    name: error.name,
    message: error.message,
    stack: error.stack?.substring(0, 200)
  });
}
---

<Info count={projects.length} />

<div class="p-project-layout l-content" data-columns="5">
  <ul class="p-project-list">
    {projects.map((project) => (
      <li class="p-project-list__item">
        <ProjectCard
          id={project.id}
          title={project.title}
          tags={project.tags}
          imageSrc={project.imageSrc}
          url={project.url}
        />
      </li>
    ))}
  </ul>

  <div class="p-project-list__btn">
    <button class="js-more-btn">ARCHIVED PROJECTS</button>
  </div>
</div>

<style lang="scss" is:global>
@use '../../../assets/scss/mediaquery' as me;
@use '../../../assets/scss/mixin' as mi;

.p-project-layout {
  margin-block-start: 22px;
  @include me.sp {
    margin-block-start: 20px;
  }
}

.p-project-list {
  display: grid;
  grid-template-columns: 100%;
  @include me.pc {
    column-gap: 30px;
    row-gap: 70px;
    @at-root [data-columns="default"] & {
      grid-template-columns: repeat(5, 1fr);
    }
    @at-root [data-columns="2"] & {
      grid-template-columns: repeat(2, 1fr);
    }
    @at-root [data-columns="3"] & {
      grid-template-columns: repeat(3, 1fr);
    }
    @at-root [data-columns="5"] & {
      grid-template-columns: repeat(5, 1fr);
    }
  }
  @include me.sp {
    row-gap: 46px;
  }

  .c-project-card {

    &__title {
      @include me.pc {
        @at-root [data-columns="2"] & {
          font-size: 1.8rem;
        }
        @at-root [data-columns="3"] & {
          font-size: 1.6rem;
        }
      }
    }

    &__tags {
      @include me.pc {
        @at-root [data-columns="2"] & {
          font-size: 1.4rem;
        }
        @at-root [data-columns="3"] & {
          font-size: 1.4rem;
        }
      }
    }
  }

  &__btn {
    display: flex;
    justify-content: center;
    margin-block-start: 150px;
    @include me.sp {
      margin-block-start: 120px;
    }

    button {
      color: var(--c-white);
      font-size: 2.4rem;
      font-weight: 600;
      line-height: 140%;
      letter-spacing: -.02rem;
      text-decoration: underline;
      @include me.sp {
        font-size: 2rem;
      }
    }
  }

}
</style>
