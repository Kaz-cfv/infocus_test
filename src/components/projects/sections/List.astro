---
import Card from "../parts/Card.astro";
import Info from "../parts/Info.astro";

// Props型定義 - 空のPropsでクライアントサイドで動的に設定
export interface Props {}
---

<Info count={0} />

<div class="p-project-layout l-content" data-columns="5" data-main-content>
  <ul class="p-project-list" id="projectsList">
    <!-- プロジェクトはクライアントサイドで動的に追加 -->
  </ul>

  <div class="p-project-list__btn">
    <a href="/projects/?archived=true">ARCHIVED PROJECTS</a>
  </div>
</div>

<!-- クライアントサイドでAPIデータを受け取る -->
<script>

  // カスタムイベントでAPIデータを受け取る
  document.addEventListener('projectsDataLoaded', (event) => {
    const projectsData = (event as CustomEvent).detail;


    // プロジェクトデータを処理
    let projects = [];
    let tagMap = {};

    if (Array.isArray(projectsData)) {

      // JSONファイルのデータ形式に対応
      projects = projectsData
        .filter(item => {
          const hasTitle = !!item.title;
          const hasSlug = !!item.slug;
          return hasTitle && hasSlug;
        })
        .map((item, index) => {
          let categories = [];

          // カテゴリー情報
          if (item.taxonomy?.projects && Array.isArray(item.taxonomy.projects)) {
            categories = item.taxonomy.projects.map(category => ({
              name: category.name,
              url: `/projects/?category=${category.slug}`
            }));
          }

          // 画像URL取得
          const imageSrc = item.acfs?.thumbnail?.image?.url || '';

          // カテゴリースラッグの配列を作成
          const categorySlugs = (item.taxonomy?.projects && Array.isArray(item.taxonomy.projects))
            ? item.taxonomy.projects.map(tag => tag.slug)
            : [];

          // タグスラッグの配列を作成
          const tagSlugs = (item.acfs?.tags && Array.isArray(item.acfs.tags))
            ? item.acfs.tags.filter(tag => tag.terms?.slug).map(tag => tag.terms.slug)
            : [];

          // アーカイブフラグの取得
          const isArchived = item.acfs?.is_archived || false;

          return {
            id: item.id || index + 1,
            title: item.title || 'No Title',
            tags: categories,
            imageSrc: imageSrc,
            url: `/projects/${item.slug}/`,
            type: "default",
            categorySlugs: categorySlugs,
            tagSlugs: tagSlugs,
            isArchived: isArchived
          };
        })
        .sort((a, b) => b.id - a.id);

    }

    // プロジェクト数をInfoコンポーネントに更新
    const countElements = document.querySelectorAll('.p-project-info__title-num');
    countElements.forEach(element => {
      element.textContent = `(${projects.length})`;
    });

    // プロジェクトリストを動的に追加
    const projectsList = document.getElementById('projectsList');
    if (projectsList && projects.length > 0) {
      projectsList.innerHTML = projects.map(project => {
        const tagsHtml = project.tags.map((category, index) => {
          const separator = index < project.tags.length - 1 ? '<span class="c-project-card__separator">,</span>' : '';
          return `<a href="${category.url}" class="c-project-card__category js-hover-item">${category.name}</a>${separator}`;
        }).join('');

        return `
          <li class="p-project-list__item"
            data-categories="${project.categorySlugs.join(',')}"
            data-tags="${project.tagSlugs.join(',')}"
            data-project-id="${project.id}"
            data-archived="${project.isArchived}"
          >
            <div class="c-project-card" data-id="${project.id}" data-type="${project.type}">
              <a href="${project.url}" class="c-project-card__image-wrapper">
                <img src="${project.imageSrc}" alt="${project.title}" class="c-project-card__image" />
              </a>
              <div class="c-project-card__content">
                <h3 class="c-project-card__title">${project.title}</h3>
                <div class="c-project-card__tags js-hover">
                  ${tagsHtml}
                </div>
              </div>
            </div>
          </li>
        `;
      }).join('');

      // タグマッピング情報をグローバルに保存
      window.projectTagMap = tagMap;
    }

    // DOM生成完了後にNavigationHoverを適用
    setTimeout(() => {
      // NavigationHoverの再初期化イベントを発火
      const hoverEvent = new CustomEvent('reinitializeHover', {
        detail: { element: projectsList }
      });
      document.dispatchEvent(hoverEvent);

      // グローバルなNavigationHoverインスタンスが存在する場合、直接初期化
      if (window.navigationHover && typeof window.navigationHover.initializeInElement === 'function') {
        window.navigationHover.initializeInElement(projectsList);
      }

      // 手動でホバー処理を追加
      const hoverContainers = projectsList.querySelectorAll('.js-hover');
      hoverContainers.forEach((container) => {
        const items = container.querySelectorAll('.js-hover-item');
        items.forEach((item) => {
          item.addEventListener('mouseenter', (e) => {
            const hoveredItem = e.currentTarget as HTMLElement;
            hoveredItem.classList.add('is-hovered');

            items.forEach(siblingItem => {
              if (siblingItem !== hoveredItem) {
                (siblingItem as HTMLElement).classList.add('is-dimmed');
              }
            });
          });

          item.addEventListener('mouseleave', (e) => {
            const leftItem = e.currentTarget as HTMLElement;
            leftItem.classList.remove('is-hovered');

            items.forEach(siblingItem => {
              if (siblingItem !== leftItem) {
                (siblingItem as HTMLElement).classList.remove('is-dimmed');
              }
            });
          });
        });
      });

    }, 100);
  });
</script>

<style lang="scss" is:global>
@use '../../../assets/scss/mediaquery' as me;
@use '../../../assets/scss/mixin' as mi;

.p-project-layout {
  margin-block-start: 22px;
  @include me.sp {
    margin-block-start: 20px;
  }
}

.p-project-list {
  display: grid;
  grid-template-columns: 100%;
  @include me.pc {
    column-gap: 30px;
    row-gap: 70px;
    @at-root [data-columns="default"] & {
      grid-template-columns: repeat(5, 1fr);
    }
    @at-root [data-columns="2"] & {
      grid-template-columns: repeat(2, 1fr);
    }
    @at-root [data-columns="3"] & {
      grid-template-columns: repeat(3, 1fr);
    }
    @at-root [data-columns="5"] & {
      grid-template-columns: repeat(5, 1fr);
    }
  }
  @include me.sp {
    row-gap: 46px;
  }

  .c-project-card {

    &__title {
      @include me.pc {
        @at-root [data-columns="2"] & {
          font-size: 1.8rem;
        }
        @at-root [data-columns="3"] & {
          font-size: 1.6rem;
        }
      }
    }

    &__tags {
      @include me.pc {
        @at-root [data-columns="2"] & {
          font-size: 1.4rem;
        }
        @at-root [data-columns="3"] & {
          font-size: 1.4rem;
        }
      }
    }
  }

  &__btn {
    display: flex;
    justify-content: center;
    margin-block-start: 150px;
    @include me.sp {
      margin-block-start: 120px;
    }

    a {
      display: inline-block;
      color: var(--c-white);
      font-size: 2.4rem;
      font-weight: 600;
      line-height: 140%;
      letter-spacing: -.02rem;
      text-decoration: underline;
      @include me.sp {
        font-size: 2rem;
      }
    }
  }
}

.c-project-card {
  display: flex;
  flex-direction: column;
  position: relative;
  transition: opacity 0.3s ease-out;
  height: 100%;

  &[data-type="cover"] {
    height: 100%;
  }

  &__image-wrapper {
    display: block;
    position: relative;
    overflow: hidden;
    aspect-ratio: 16 / 9;
    flex: 1;
    @include me.sp {
      height: 56.1904%;
    }
    @at-root [data-type="pickup"] & {
      @include me.pc {
        margin-top: 30px;
        margin-inline: 30px;
      }
    }
    @at-root [data-type="cover"] & {
      aspect-ratio: 1 / 1;
      flex: 1;
      @include me.sp {
        aspect-ratio: unset;
        height: 100%;
        min-height: 100%;
        width: 100%;
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
      }
    }
  }

  &__image {
    @include mi.absolute-all;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.5s ease-out;
  }

  &__video {
    @include mi.absolute-all;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.5s ease-out;
    z-index: 1;
  }

  &__content {
    display: flex;
    flex-direction: column;
    margin-top: 16px;
    @include me.pc {
      row-gap: 8px;
    }
    @at-root [data-type="cover"] & {
      display: none;
    }
  }

  &__title {
    color: var(--c-white);
    font-size: 1.4rem;
    font-weight: 700;
    line-height: 2.32rem;
    @include me.sp {
      font-size: 1.6rem;
    }
    @at-root [data-type="pickup"] & {
      font-size: 2rem;
      @include me.sp {
        font-size: 1.8rem;
      }
    }
  }

  &__tags {
    font-size: 1.2rem;
    font-weight: 600;
    line-height: 2.32rem;
    @include me.sp {
      font-size: 1.4rem;
    }
    @at-root [data-type="pickup"] & {
      font-size: 1.4rem;
      @include me.sp {
        font-size: 1.2rem;
      }
    }
  }

  &__category {
    display: inline-block;
    color: var(--c-gray);
  }

  &__separator {
    color: var(--c-gray);
    margin-inline-end: 4px;
  }
}
</style>
