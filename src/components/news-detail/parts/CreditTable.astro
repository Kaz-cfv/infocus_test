---
interface CreditItem {
  caption: string;
  content: string;
  link: boolean;
  url?: string;
}

interface Props {
  heading: string;
  items: CreditItem[];
}

const { heading, items } = Astro.props;
---

<div class="p-news-detail__creditTable">
  {heading && heading.trim() !== '' && (
    <h3 class="p-news-detail__creditTable-head">{heading}</h3>
  )}
  <dl class="p-news-detail__creditTable-item">
    {items.map((item) => (
      <>
        <dt class="p-news-detail__creditTable-caption">{item.caption}</dt>
        <dd class="p-news-detail__creditTable-content">
          {item.link && item.url ? (
            <a href={item.url}>{item.content}</a>
          ) : (
            item.content
          )}
        </dd>
      </>
    ))}
  </dl>
</div>

<style lang="scss">
@use '../../../assets/scss/mediaquery' as me;
@use '../../../assets/scss/mixin' as mi;

.p-news-detail__creditTable {

  &-head {
    margin-block-end: 22px;
    font-size: 1.8rem;
  }

  &-item {
    display: grid;
    grid-template-columns: 146px 1fr;
    align-content: flex-start;
    column-gap: 60px;
    row-gap: 12px;
    @include me.sp {
      column-gap: 32px;
    }
  }

  &-caption {
    opacity: .5;
    color: var(--c-white);
    font-size: 1.4rem;
  }

  &-content {
    color: var(--c-white);
    font-size: 1.4rem;
    font-weight: 600;

    a {
      position: relative;
      color: var(--c-white);
      @include me.pc {
        &::after {
          content: "";
          position: absolute;
          bottom: 0;
          left: 0;
          width: 100%;
          height: 1px;
          background-color: var(--c-white);
        }
      }
      @include me.sp {
        text-decoration: underline;
      }
    }
  }

}

</style>
