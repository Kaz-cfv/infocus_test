---
import TeamCard from '../parts/TeamCard.astro';

---

<div class="p-team-content" data-main-content>
  <ul class="p-team-content__list" id="teamList">
    <!-- チームデータがロードされると動的に表示されます -->
  </ul>

  <!-- SP時の2カラムレイアウト用 -->
  <div class="p-team-content__columns" style="display: none;">
    <div class="p-team-content__column" data-column="left"></div>
    <div class="p-team-content__column" data-column="right"></div>
  </div>
</div>

<style lang="scss" is:global>
@use '../../../assets/scss/mediaquery' as me;
@use '../../../assets/scss/mixin' as mi;

.p-team-content {
  margin-block-start: 90px;
  padding-inline: 30px;
  padding-block-end: 107px;
  @include me.sp {
    margin-block-start: 60px;
    padding-inline: 20px;
    padding-block-end: 80px;
  }

  &__list {
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    column-gap: 25px;
    row-gap: 50px;
    @include me.sp {
      display: none;
    }
  }

  &__columns {
    display: none;
    @include me.sp {
      display: flex;
      column-gap: 20px;
      align-items: flex-start;
    }
  }

  &__column {
    flex: 1;
    display: flex;
    flex-direction: column;
    row-gap: 50px;
  }
}

.c-team-card {
  display: grid;
  grid-template-columns: 100%;
  align-content: flex-start;
  row-gap: 18px;

  &__thumb {
    display: block;
  }

  &__info {
    display: grid;
    grid-template-columns: 100%;
    align-content: flex-start;
    row-gap: 22px;
    @include me.sp {
      row-gap: 12px;
    }
  }

  &__name {
    font-size: 1.8rem;
    font-weight: 600;
    line-height: 0.78;
    letter-spacing: .02rem;
  }

  &__tags {
    display: flex;
    flex-wrap: wrap;
    column-gap: 4px;
    row-gap: 8px;

    &-item {
      display: flex;
      align-items: center;
      column-gap: 4px;
      color: var(--c-gray);
      font-size: 1.2rem;
      font-weight: 700;
      line-height: 0.80;
      &::after {
        content: "/";
        display: inline-block;
      }
      &:last-child {
        &::after {
          display: none;
        }
      }

      a {
        color: var(--c-gray);
        font-size: 1.2rem;
        font-weight: 700;
        line-height: 0.80;
      }
    }
  }
}
</style>

<script>
class TeamLayoutManager {
  constructor() {
    this.teamData = [];
    this.init();
  }

  init() {
    // APIデータの受信待ち
    document.addEventListener('teamDataLoaded', (event) => {
      this.handleTeamData(event.detail);
    });

    if (window.innerWidth <= 768) {
      this.setupMobileLayout();
    }

    window.addEventListener('resize', () => {
      if (window.innerWidth <= 768) {
        this.setupMobileLayout();
      } else {
        this.setupDesktopLayout();
      }
    });
  }

  /**
   * APIから取得したチームデータを処理
   */
  handleTeamData(teamData) {
    // console.log('👥 Content.astro: チームデータを受信:', teamData);

    this.teamData = teamData;
    this.renderTeamCards();
  }

  /**
   * チームカードを動的に生成・表示
   */
  renderTeamCards() {
    const teamList = document.getElementById('teamList');
    if (!teamList) return;

    // 既存の要素をクリア
    teamList.innerHTML = '';

    // チームデータをループして表示
    this.teamData.forEach((member) => {
      const listItem = this.createTeamListItem(member);
      teamList.appendChild(listItem);
    });

    // カード生成完了をフィルタリングシステムに通知
    const event = new CustomEvent('teamCardsRendered');
    document.dispatchEvent(event);

    // レスポンシブレイアウトの再適用
    if (window.innerWidth <= 768) {
      this.setupMobileLayout();
    }
  }

  /**
  * 個別のチームリストアイテムを作成
  */
  createTeamListItem(member) {
  const li = document.createElement('li');
  li.className = 'p-team-content__list-item';
  li.setAttribute('data-item', member.id);

  // ポジションスラッグの取得（taxonomy.positionから）
  const positions = member.taxonomy?.position || [];
  const positionSlugs = positions.map(pos => pos.slug || '').filter(slug => slug);
  li.setAttribute('data-positions', positionSlugs.join(','));

  // チームカードのHTML生成
  const teamCard = this.createTeamCardHTML(member);
  li.innerHTML = teamCard;

  return li;
  }

  /**
   * チームカードのHTMLを生成
   */
  createTeamCardHTML(member) {
    const name = member.title || 'No Name';
    const pic = member.acfs?.thumbnail?.url || '';
    const slug = member.slug || '#';
    const url = slug !== '#' ? `/team/${slug}` : '#';

    // タグ情報の処理
    const tags = this.processTeamTags(member);
    const tagsHTML = tags.map(tag => {
      // 全てのタグをaタグでラップし、positionフィルターのリンクを設定
      const filterUrl = tag.slug ? `/team/?position=${tag.slug}` : '/team/';
      return `<li class="c-team-card__tags-item js-hover-item"><a href="${filterUrl}">${tag.name}</a></li>`;
    }).join('');

    return `
      <div class="c-team-card">
        <a href="${url}" class="c-team-card__thumb">
          <img src="${pic}" alt="${name}">
        </a>
        <div class="c-team-card__info">
          <h3 class="c-team-card__name">${name}</h3>
          <ul class="c-team-card__tags js-hover">
            ${tagsHTML}
          </ul>
        </div>
      </div>
    `;
  }

  /**
   * チームメンバーのタグ情報を処理
   */
  processTeamTags(member) {
    const tags = [];

    // ポジション情報をtaxonomy.positionから取得
    const positions = member.taxonomy?.position || [];
    positions.forEach(position => {
      if (position.name) {
        tags.push({
          name: position.name,
          slug: position.slug,
          url: '#',
          isPosition: true
        });
      }
    });

    // その他のタグが必要な場合はここで追加
    // 例：スキル、専門分野など

    return tags;
  }

  setupMobileLayout() {
    const list = document.querySelector('.p-team-content__list');
    const columns = document.querySelector('.p-team-content__columns');
    const leftColumn = document.querySelector('[data-column="left"]');
    const rightColumn = document.querySelector('[data-column="right"]');

    if (!list || !columns) return;

    // リストを非表示にし、カラムを表示
    list.style.display = 'none';
    columns.style.display = 'flex';

    // カラムをクリア
    leftColumn.innerHTML = '';
    rightColumn.innerHTML = '';

    // アイテムを左右に振り分け
    const items = list.querySelectorAll('.p-team-content__list-item');
    items.forEach((item, index) => {
      const clonedItem = item.cloneNode(true);
      if (index % 2 === 0) {
        leftColumn.appendChild(clonedItem);
      } else {
        rightColumn.appendChild(clonedItem);
      }
    });
  }

  setupDesktopLayout() {
    const list = document.querySelector('.p-team-content__list');
    const columns = document.querySelector('.p-team-content__columns');

    if (!list || !columns) return;

    list.style.display = 'grid';
    columns.style.display = 'none';
  }
}

// ページ読み込み時に実行
if (typeof window !== 'undefined') {
  document.addEventListener('DOMContentLoaded', () => {
    new TeamLayoutManager();
  });
}
</script>
