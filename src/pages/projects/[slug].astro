---
import Layout from '@layouts/Layout.astro';
import Article from '@components/projects-detail/section/Article.astro';
import Related from '@components/projects-detail/section/Related.astro';

export async function getStaticPaths() {
  try {
    const apiUrl = import.meta.env.API_URL_PROJECTS;
    const response = await fetch(apiUrl);
    // const response = await fetch('https://infocus.wp.site-prev2.com/wp-json/wp/v2/projects');

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const projectsData = await response.json();
    const projectsArray = Array.isArray(projectsData) ? projectsData : [projectsData];

    return projectsArray
      .filter(item => item.title && item.slug)
      .map((project) => ({
        params: { slug: project.slug },
        props: { project }
      }));
  } catch (error) {
    console.error('❌ Failed to fetch projects for static paths:', error);
    return [];
  }
}

const { project } = Astro.props;

// 前後の記事を取得するための全プロジェクトデータ取得
let allProjects = [];
let prevProject = null;
let nextProject = null;
try {
  const apiUrl = import.meta.env.API_URL_PROJECTS;
  const response = await fetch(apiUrl);
  // const response = await fetch('https://infocus.wp.site-prev2.com/wp-json/wp/v2/projects');

  if (response.ok) {
    const projectsData = await response.json();
    const projectsArray = Array.isArray(projectsData) ? projectsData : [projectsData];

    // 有効なプロジェクトのみをフィルタリングし、日付順でソート（降順 = 新しい順）
    const validProjects = projectsArray
      .filter(item => item.title && item.slug)
      .sort((a, b) => new Date(b.date) - new Date(a.date));

    // 現在のプロジェクトのインデックスを特定
    const currentIndex = validProjects.findIndex(p => p.slug === project.slug);

    if (currentIndex !== -1) {
      // 前の記事（より新しい記事）
      if (currentIndex > 0) {
        const prev = validProjects[currentIndex - 1];
        prevProject = {
          slug: prev.slug,
          title: prev.title
        };
      }

      // 次の記事（より古い記事）
      if (currentIndex < validProjects.length - 1) {
        const next = validProjects[currentIndex + 1];
        nextProject = {
          slug: next.slug,
          title: next.title
        };
      }
    }

    // 関連プロジェクト用のデータ（既存のロジック）
    allProjects = validProjects
      .filter(item => item.slug !== project.slug) // 現在のプロジェクトを除外
      .map((item, index) => {
        // tagsの構造を確認して適切に抽出
        let tags = [];
        if (item.acfs?.tags && Array.isArray(item.acfs.tags)) {
          tags = item.acfs.tags.filter(tag => tag.terms && tag.terms.name).map(tag => ({
            name: tag.terms.name,
            url: `/projects/?category=${tag.terms.term_id || ''}`
          }));
        }

        return {
          id: item.id || index + 1,
          title: item.title.trim(),
          tags: tags,
          imageSrc: item.acfs?.thumbnail?.image?.url,
          url: `/projects/${item.slug}/`,
          type: "default"
        };
      })
      .sort((a, b) => b.id - a.id) // IDの降順でソート（新しい順）
      .slice(0, 4); // 関連プロジェクトは最大4件まで表示
  }
} catch (error) {
  console.error('❌ Failed to fetch related projects and navigation:', error);
}

// メタデータの設定
const title = project.title;
const description = project.acfs?.outline ? project.acfs.outline.replace(/<[^>]*>/g, '').substring(0, 160) : '';

const pageMeta = {
  title: title,
  ogpType: "website"
};
---

<Layout
  title={title}
  pageName="project-detail"
  meta={pageMeta}
>

<Article
  project={project}
  prevProject={prevProject}
  nextProject={nextProject}
/>
{allProjects.length > 0 && (
  <Related projects={allProjects} />
)}

</Layout>

<style lang="scss" is:global>
@use '../../assets/scss/mediaquery' as me;
@use '../../assets/scss/mixin' as mi;

</style>
